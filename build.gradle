buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id "maven-publish"
    id "java"
    id "signing"
}

group 'com.nickhudkins'
version '1.4.0'

sourceCompatibility = 1.8

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories {
    mavenLocal()
    mavenCentral()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "knezmilos13"
            name "Milos Milutinovic"
            email "knezmilos13@gmail.com"
        }
    }

    scm {
        url "https://github.com/nickhudkins/prettyboxformatter"
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        mavenPublication(MavenPublication) {
            groupId 'com.nickhudkins'
            artifactId 'prettyboxformatter'
            version '1.4.0'
            from components.java

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A library for formatting/serializing text into boxes drawn using UTF-8 characters.')
                root.appendNode('name', 'Pretty Box Formatter')
                root.appendNode('url', 'https://github.com/nickhudkins/prettyboxformatter')
                root.children().last() + pomConfig
            }

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }
    
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation group: 'org.jetbrains', name: 'annotations', version: '13.0'
}
